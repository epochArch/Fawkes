server {
  include "common"
  akka {
    actor{
      default-dispatcher
        {
          executor = "default-executor"

          # This will be used if you have set "executor = "default-executor"".
          # If an ActorSystem is created with a given ExecutionContext, this
          # ExecutionContext will be used as the default executor for all
          # dispatchers in the ActorSystem configured with
          # executor = "default-executor". Note that "default-executor"
          # is the default value for executor, and therefore used if not
          # specified otherwise. If no ExecutionContext is given,
          # the executor configured in "fallback" will be used.
          default-executor {
            fallback = "thread-pool-executor"
          }
          # Throughput defines the maximum number of messages to be
          # processed per actor before the thread jumps to the next actor.
          # Set to 1 for as fair as possible.
          throughput = 10
          # How long time the dispatcher will wait for new actors until it shuts down
          shutdown-timeout = 300s

          thread-pool-executor {
            # Keep alive time for threads
            keep-alive-time = 60s

            # Min number of threads to cap factor-based core number to
            core-pool-size-min = 32

            # The core pool size factor is used to determine thread pool core size
            # using the following formula: ceil(available processors * factor).
            # Resulting size is then bounded by the core-pool-size-min and
            # core-pool-size-max values.
            core-pool-size-factor = 3.0

            # Max number of threads to cap factor-based number to
            core-pool-size-max = 64

            # Minimum number of threads to cap factor-based max number to
            # (if using a bounded task queue)
            max-pool-size-min = 128

            # Max no of threads (if using a bounded task queue) is determined by
            # calculating: ceil(available processors * factor)
            max-pool-size-factor  = 3.0

            # Max number of threads to cap factor-based max number to
            # (if using a  bounded task queue)
            max-pool-size-max = 256

            # Specifies the bounded capacity of the task queue (< 1 == unbounded)
            task-queue-size = -1

            # Specifies which type of task queue will be used, can be "array" or
            # "linked" (default)
            task-queue-type = "linked"

            # Allow core threads to time out
            allow-core-timeout = on
          }
        }
    }

  }
}
client {
  include "common"
  akka {
    actor{
      default-dispatcher
        {
          executor = "default-executor"

          # This will be used if you have set "executor = "default-executor"".
          # If an ActorSystem is created with a given ExecutionContext, this
          # ExecutionContext will be used as the default executor for all
          # dispatchers in the ActorSystem configured with
          # executor = "default-executor". Note that "default-executor"
          # is the default value for executor, and therefore used if not
          # specified otherwise. If no ExecutionContext is given,
          # the executor configured in "fallback" will be used.
          default-executor {
            fallback = "thread-pool-executor"
          }
          # Throughput defines the maximum number of messages to be
          # processed per actor before the thread jumps to the next actor.
          # Set to 1 for as fair as possible.
          throughput = 1
          # How long time the dispatcher will wait for new actors until it shuts down
          shutdown-timeout = 300s

          thread-pool-executor {
            # Keep alive time for threads
            keep-alive-time = 60s

            # Min number of threads to cap factor-based core number to
            core-pool-size-min = 8

            # The core pool size factor is used to determine thread pool core size
            # using the following formula: ceil(available processors * factor).
            # Resulting size is then bounded by the core-pool-size-min and
            # core-pool-size-max values.
            core-pool-size-factor = 3.0

            # Max number of threads to cap factor-based number to
            core-pool-size-max = 64

            # Minimum number of threads to cap factor-based max number to
            # (if using a bounded task queue)
            max-pool-size-min = 64

            # Max no of threads (if using a bounded task queue) is determined by
            # calculating: ceil(available processors * factor)
            max-pool-size-factor  = 3.0

            # Max number of threads to cap factor-based max number to
            # (if using a  bounded task queue)
            max-pool-size-max = 128

            # Specifies the bounded capacity of the task queue (< 1 == unbounded)
            task-queue-size = -1

            # Specifies which type of task queue will be used, can be "array" or
            # "linked" (default)
            task-queue-type = "linked"

            # Allow core threads to time out
            allow-core-timeout = on
          }
        }
    }
  }
}